import { parsePath, createPath } from "history";
const parse = (fn, s = "") => {
    return `#${fn(s.slice(1))}`;
};
const getProperty = (scope, k) => {
    const v = scope[k];
    return typeof v === "function" ? v.bind(scope) : v;
};
function inWrapper(x) {
    return (x in
        {
            history: 1,
            location: 1,
        });
}
function inHistoryWrapper(x) {
    return (x in
        {
            pushState: 1,
            replaceState: 1,
        });
}
const makeArgsEncoder = ({ encode, ...config }) => {
    const { defaultPath = {} } = config;
    return (fn) => {
        return (...[_s, _t, url]) => {
            if (!url) {
                return fn(_s, _t, url);
            }
            const path = parsePath((url || "").toString());
            const hash = parse(encode, path.hash);
            return fn(_s, _t, createPath({
                ...defaultPath,
                hash,
            }));
        };
    };
};
const useWrapper = ({ encode, decode, ...config }) => {
    const encodeArgs = makeArgsEncoder({ encode, ...config });
    return {
        history: (globalHistory) => {
            return new Proxy(globalHistory, {
                get: (_, prop) => {
                    const v = getProperty(globalHistory, prop);
                    return inHistoryWrapper(prop) ? encodeArgs(v) : v;
                },
            });
        },
        location: (location) => {
            return {
                ...location,
                hash: parse(decode, location.hash),
            };
        },
    };
};
export { parse as _parse };
export { useWrapper, inWrapper, getProperty };
