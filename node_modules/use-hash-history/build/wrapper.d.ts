export interface Parser {
    (to: string): string;
}
export declare type DefaultPath = {
    pathname?: string;
    search?: string;
};
declare type EncodeOptions = {
    encode: Parser;
    defaultPath?: DefaultPath;
};
declare type WrapperOptions = EncodeOptions & {
    decode: Parser;
};
declare type Scope = Partial<Omit<Window, number> & History>;
declare const parse: (fn: Parser, s?: string) => string;
declare const getProperty: (scope: Scope, k: string | symbol) => any;
declare type ProxyCore = "history" | "location";
declare function inWrapper(x: string | symbol): x is ProxyCore;
declare const useWrapper: ({ encode, decode, ...config }: WrapperOptions) => {
    history: (globalHistory: History) => History;
    location: (location: Location) => Location;
};
export { parse as _parse };
export { useWrapper, inWrapper, getProperty };
