const split = (oldRoot, newRoot, input) => {
    const restIndex = input.indexOf(oldRoot) + oldRoot.length;
    const first = input.substring(0, restIndex);
    const isRelative = input.match(/^\.\.\//);
    const rest = input.substring(restIndex);
    return [isRelative ? first : newRoot, rest];
};
const transcoder = (oldRoot, newRoot) => {
    return (oldSlash, newSlash) => {
        return (input) => {
            const [prefix, rest] = split(oldRoot, newRoot, input);
            return prefix + rest.replaceAll(oldSlash, newSlash);
        };
    };
};
const useTranscoders = ({ hashRoot = "", hashSlash = "/", ...config }) => {
    return {
        encode: transcoder("/", hashRoot)("/", hashSlash),
        decode: transcoder(hashRoot, "/")(hashSlash, "/"),
        ...config,
    };
};
export { useTranscoders };
